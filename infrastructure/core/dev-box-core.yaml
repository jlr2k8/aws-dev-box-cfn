AWSTemplateFormatVersion: '2010-09-09'
Description: 'Dev Box Core Infrastructure - VPC, EC2, Security Groups, Route 53'

Parameters:
  Environment:
    Type: String
    Default: dev
    Description: Environment name
  
  InstanceType:
    Type: String
    Default: t3.large
    Description: EC2 instance type
  
  KeyPairName:
    Type: String
    Default: ""
    Description: EC2 Key Pair name (optional - used for SSH access)
  
  SecretsManagerSecretName:
    Type: String
    Default: dev-box-credentials
    Description: Secrets Manager secret name for credentials
  
  DomainName:
    Type: String
    Default: dev.yourdomain.com
    Description: Domain name for the dev box
  
  HostedZoneId:
    Type: String
    Default: YOUR_HOSTED_ZONE_ID
    Description: Route 53 Hosted Zone ID

Conditions:
  HasDomain: !Not [!Equals [!Ref DomainName, '']]
  HasKeyPair: !Not [!Equals [!Ref KeyPairName, '']]

Resources:
  # VPC
  VPC:
    Type: AWS::EC2::VPC
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: !Sub '${Environment}-dev-box-vpc'
        - Key: Environment
          Value: !Ref Environment

  # Internet Gateway
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      Tags:
        - Key: Name
          Value: !Sub '${Environment}-dev-box-igw'
        - Key: Environment
          Value: !Ref Environment

  # Internet Gateway Attachment
  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  # Public Subnet
  PublicSubnet:
    Type: AWS::EC2::Subnet
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [0, !GetAZs '']
      CidrBlock: 10.0.1.0/24
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub '${Environment}-dev-box-public'
        - Key: Environment
          Value: !Ref Environment

  # Route Table
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub '${Environment}-dev-box-rt'
        - Key: Environment
          Value: !Ref Environment

  # Default Route
  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  # Subnet Route Table Association
  PublicSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet

  # Security Group
  DevBoxSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for dev box
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3389
          ToPort: 3389
          CidrIp: 0.0.0.0/0
          Description: RDP access
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
          Description: SSH access
      Tags:
        - Key: Name
          Value: !Sub '${Environment}-dev-box-sg'
        - Key: Environment
          Value: !Ref Environment

  # IAM Role for EC2
  DevBoxRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
        - arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy
      Policies:
        - PolicyName: SecretsManagerAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                Resource: !Sub 'arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:${SecretsManagerSecretName}*'
      Tags:
        - Key: Name
          Value: !Sub '${Environment}-dev-box-role'
        - Key: Environment
          Value: !Ref Environment

  # Instance Profile
  DevBoxInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref DevBoxRole

  # Elastic IP
  DevBoxElasticIP:
    Type: AWS::EC2::EIP
    DependsOn: InternetGatewayAttachment
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: !Sub '${Environment}-dev-box-eip'
        - Key: Environment
          Value: !Ref Environment

  # EC2 Instance
  DevBox:
    Type: AWS::EC2::Instance
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      ImageId: ami-07f134e32cbbbfc98  # Windows Server 2025
      InstanceType: !Ref InstanceType
      KeyName: !If [HasKeyPair, !Ref KeyPairName, !Ref "AWS::NoValue"]
      SecurityGroupIds:
        - !Ref DevBoxSecurityGroup
      SubnetId: !Ref PublicSubnet
      IamInstanceProfile: !Ref DevBoxInstanceProfile
      UserData:
        Fn::Base64: !Sub |
          <powershell>
          # Set execution policy
          Set-ExecutionPolicy -ExecutionPolicy RemoteSigned -Force
          
          # Get credentials from Secrets Manager
          $secret = Get-SECSecretValue -SecretId ${SecretsManagerSecretName} -Region ${AWS::Region}
          $creds = $secret.SecretString | ConvertFrom-Json
          
          # Create local user
          $username = $creds.username
          $password = $creds.password
          
          # Create user if it doesn't exist
          try {
              $user = Get-LocalUser -Name $username -ErrorAction Stop
              Write-Host "User $username already exists"
          } catch {
              New-LocalUser -Name $username -Password (ConvertTo-SecureString $password -AsPlainText -Force) -Description "Dev Box User"
              Write-Host "Created user $username"
          }
          
          # Add to administrators group
          Add-LocalGroupMember -Group "Administrators" -Member $username
          Add-LocalGroupMember -Group "Remote Desktop Users" -Member $username
          
          # Install Chocolatey
          Set-ExecutionPolicy Bypass -Scope Process -Force
          [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072
          iex ((New-Object System.Net.WebClient).DownloadString('https://community.chocolatey.org/install.ps1'))
          
          # Install development tools
          choco install -y vscode nodejs docker-desktop python git notepadplusplus
          
          # Clean up desktop - remove EC2 shortcuts
          $desktopPath = [Environment]::GetFolderPath("Desktop")
          $ec2Shortcuts = @("EC2 Feedback", "EC2 Microsoft Windows Guide")
          foreach ($shortcut in $ec2Shortcuts) {
              $shortcutPath = Join-Path $desktopPath "$shortcut.lnk"
              if (Test-Path $shortcutPath) {
                  Remove-Item $shortcutPath -Force
                  Write-Host "Removed desktop shortcut: $shortcut"
              }
          }
          
          # Pin useful apps to taskbar
          $taskbarApps = @(
              "C:\Program Files\Microsoft VS Code\Code.exe",
              "C:\Program Files\Notepad++\notepad++.exe"
          )
          
          foreach ($app in $taskbarApps) {
              if (Test-Path $app) {
                  # Create shortcut in Start Menu for pinning
                  $startMenuPath = "$env:APPDATA\Microsoft\Windows\Start Menu\Programs"
                  $appName = [System.IO.Path]::GetFileNameWithoutExtension($app)
                  $shortcutPath = Join-Path $startMenuPath "$appName.lnk"
                  
                  $WshShell = New-Object -comObject WScript.Shell
                  $Shortcut = $WshShell.CreateShortcut($shortcutPath)
                  $Shortcut.TargetPath = $app
                  $Shortcut.Save()
                  
                  Write-Host "Created shortcut for: $appName"
              }
          }
          
          # Configure RDP for better performance
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -Name 'MinEncryptionLevel' -Value 0
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -Name 'SecurityLayer' -Value 0
          
          # Enable RDP
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\fDenyTSConnections' -Name 'fDenyTSConnections' -Value 0
          Enable-NetFirewallRule -DisplayGroup 'Remote Desktop'
          
          Write-Host "Dev box setup completed successfully"
          </powershell>
      Tags:
        - Key: Name
          Value: !Sub '${Environment}-dev-box'
        - Key: Environment
          Value: !Ref Environment

  # Associate Elastic IP
  DevBoxEIPAssociation:
    Type: AWS::EC2::EIPAssociation
    Properties:
      InstanceId: !Ref DevBox
      EIP: !Ref DevBoxElasticIP

  # Route 53 DNS Record
  DevBoxDNSRecord:
    Type: AWS::Route53::RecordSet
    Condition: HasDomain
    Properties:
      HostedZoneId: !Ref HostedZoneId
      Name: !Ref DomainName
      Type: A
      TTL: 300
      ResourceRecords:
        - !GetAtt DevBox.PublicIp

Outputs:
  DevBoxPublicIP:
    Description: Public IP address of the dev box
    Value: !GetAtt DevBox.PublicIp
    Export:
      Name: !Sub '${AWS::StackName}-PublicIP'
  
  DevBoxInstanceId:
    Description: Instance ID of the dev box
    Value: !Ref DevBox
    Export:
      Name: !Sub '${AWS::StackName}-InstanceId'
  
  DevBoxConnectionInstructions:
    Description: Instructions for connecting to the dev box
    Value: !Sub |
      Connect to your dev box:
      1. RDP to: ${DomainName} or ${DevBox.PublicIp}
      2. Username: Check Secrets Manager for credentials
      3. Password: Check Secrets Manager for credentials
      
      To get credentials:
      ./get-password.sh ${AWS::StackName}
  
  VPCId:
    Description: VPC ID for the dev box
    Value: !Ref VPC
    Export:
      Name: !Sub '${AWS::StackName}-VPCId'